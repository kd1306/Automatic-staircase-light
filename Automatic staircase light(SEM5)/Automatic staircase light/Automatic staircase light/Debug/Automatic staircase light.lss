
Automatic staircase light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ba  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c7  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000116  00000000  00000000  00000ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033a  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 1000000 //telling controller crystal frequency
#include <util/delay.h> //header to enable delay function in program

int main(void)
{
	DDRB = 0b11111100; //PB0,PB1 are used as inputs and reset are used as outputs
  92:	8c ef       	ldi	r24, 0xFC	; 252
  94:	87 bb       	out	0x17, r24	; 23
	int x=0; // taking a integer
	while(1)
	{
		if (bit_is_clear(PINB,1)) // In presence of darkness (When there is darkness pin goes low)
  96:	b1 99       	sbic	0x16, 1	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x4>
		{
			if (bit_is_set(PINB,0)) //When there is motion (motion sensor gives high output on presence of human being)
  9a:	b0 9b       	sbis	0x16, 0	; 22
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0x4>
			}
		}
		
		if (x==1) //when x is set
		{
			PORTB |=(1<<PINB2); //trigger transistor to drive power led
  9e:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9d e0       	ldi	r25, 0x0D	; 13
  a4:	a3 e0       	ldi	r26, 0x03	; 3
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	a0 40       	sbci	r26, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1e>
  b0:	00 00       	nop
			_delay_ms(1000); //wait 220ms (can be changed for higher duartion)
			PORTB &=~(1<<PINB2); //turn on transistor trigger
  b2:	c2 98       	cbi	0x18, 2	; 24
  b4:	f0 cf       	rjmp	.-32     	; 0x96 <main+0x4>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
